// Generated by gencpp from file lsbot_msgs/SpecsRotaryServoResponse.msg
// DO NOT EDIT!


#ifndef LSBOT_MSGS_MESSAGE_SPECSROTARYSERVORESPONSE_H
#define LSBOT_MSGS_MESSAGE_SPECSROTARYSERVORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lsbot_msgs
{
template <class ContainerAllocator>
struct SpecsRotaryServoResponse_
{
  typedef SpecsRotaryServoResponse_<ContainerAllocator> Type;

  SpecsRotaryServoResponse_()
    : control_type(0)
    , range_min(0.0)
    , range_max(0.0)
    , precision(0.0)
    , rated_speed(0.0)
    , reachable_speed(0.0)
    , rated_torque(0.0)
    , reachable_torque(0.0)
    , temperature_range_min(0.0)
    , temperature_range_max(0.0)  {
    }
  SpecsRotaryServoResponse_(const ContainerAllocator& _alloc)
    : control_type(0)
    , range_min(0.0)
    , range_max(0.0)
    , precision(0.0)
    , rated_speed(0.0)
    , reachable_speed(0.0)
    , rated_torque(0.0)
    , reachable_torque(0.0)
    , temperature_range_min(0.0)
    , temperature_range_max(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _control_type_type;
  _control_type_type control_type;

   typedef double _range_min_type;
  _range_min_type range_min;

   typedef double _range_max_type;
  _range_max_type range_max;

   typedef double _precision_type;
  _precision_type precision;

   typedef double _rated_speed_type;
  _rated_speed_type rated_speed;

   typedef double _reachable_speed_type;
  _reachable_speed_type reachable_speed;

   typedef double _rated_torque_type;
  _rated_torque_type rated_torque;

   typedef double _reachable_torque_type;
  _reachable_torque_type reachable_torque;

   typedef double _temperature_range_min_type;
  _temperature_range_min_type temperature_range_min;

   typedef double _temperature_range_max_type;
  _temperature_range_max_type temperature_range_max;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONTROL_TYPE_NONE)
  #undef CONTROL_TYPE_NONE
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION)
  #undef CONTROL_TYPE_POSITION
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_EFFORT)
  #undef CONTROL_TYPE_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_VELOCITY)
  #undef CONTROL_TYPE_VELOCITY
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_VELOCITY)
  #undef CONTROL_TYPE_POSITION_VELOCITY
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_EFFORT)
  #undef CONTROL_TYPE_POSITION_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_VELOCITY_EFFORT)
  #undef CONTROL_TYPE_VELOCITY_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_VELOCITY_EFFORT)
  #undef CONTROL_TYPE_POSITION_VELOCITY_EFFORT
#endif

  enum {
    CONTROL_TYPE_NONE = 0u,
    CONTROL_TYPE_POSITION = 1u,
    CONTROL_TYPE_EFFORT = 2u,
    CONTROL_TYPE_VELOCITY = 3u,
    CONTROL_TYPE_POSITION_VELOCITY = 4u,
    CONTROL_TYPE_POSITION_EFFORT = 5u,
    CONTROL_TYPE_VELOCITY_EFFORT = 6u,
    CONTROL_TYPE_POSITION_VELOCITY_EFFORT = 7u,
  };


  typedef boost::shared_ptr< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SpecsRotaryServoResponse_

typedef ::lsbot_msgs::SpecsRotaryServoResponse_<std::allocator<void> > SpecsRotaryServoResponse;

typedef boost::shared_ptr< ::lsbot_msgs::SpecsRotaryServoResponse > SpecsRotaryServoResponsePtr;
typedef boost::shared_ptr< ::lsbot_msgs::SpecsRotaryServoResponse const> SpecsRotaryServoResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator1> & lhs, const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.control_type == rhs.control_type &&
    lhs.range_min == rhs.range_min &&
    lhs.range_max == rhs.range_max &&
    lhs.precision == rhs.precision &&
    lhs.rated_speed == rhs.rated_speed &&
    lhs.reachable_speed == rhs.reachable_speed &&
    lhs.rated_torque == rhs.rated_torque &&
    lhs.reachable_torque == rhs.reachable_torque &&
    lhs.temperature_range_min == rhs.temperature_range_min &&
    lhs.temperature_range_max == rhs.temperature_range_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator1> & lhs, const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lsbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c99b39095d63ff4cbaed9c5a6eec7d20";
  }

  static const char* value(const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc99b39095d63ff4cULL;
  static const uint64_t static_value2 = 0xbaed9c5a6eec7d20ULL;
};

template<class ContainerAllocator>
struct DataType< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lsbot_msgs/SpecsRotaryServoResponse";
  }

  static const char* value(const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CONTROL_TYPE_NONE=0\n"
"uint8 CONTROL_TYPE_POSITION=1\n"
"uint8 CONTROL_TYPE_EFFORT=2\n"
"uint8 CONTROL_TYPE_VELOCITY=3\n"
"uint8 CONTROL_TYPE_POSITION_VELOCITY=4\n"
"uint8 CONTROL_TYPE_POSITION_EFFORT=5\n"
"uint8 CONTROL_TYPE_VELOCITY_EFFORT=6\n"
"uint8 CONTROL_TYPE_POSITION_VELOCITY_EFFORT=7\n"
"uint8 control_type # rotary servomotor control type\n"
"\n"
"float64 range_min # minimum work range\n"
"\n"
"float64 range_max # maximum work range\n"
"\n"
"float64 precision # angular precision\n"
"\n"
"float64 rated_speed # servomotor speed\n"
"\n"
"float64 reachable_speed # maximum speed\n"
"\n"
"float64 rated_torque # servomotor torque\n"
"\n"
"float64 reachable_torque # peak torque\n"
"\n"
"float64 temperature_range_min # minimum operational temperature\n"
"\n"
"float64 temperature_range_max # maximum operational temperature\n"
"\n"
"\n"
;
  }

  static const char* value(const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_type);
      stream.next(m.range_min);
      stream.next(m.range_max);
      stream.next(m.precision);
      stream.next(m.rated_speed);
      stream.next(m.reachable_speed);
      stream.next(m.rated_torque);
      stream.next(m.reachable_torque);
      stream.next(m.temperature_range_min);
      stream.next(m.temperature_range_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpecsRotaryServoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lsbot_msgs::SpecsRotaryServoResponse_<ContainerAllocator>& v)
  {
    s << indent << "control_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_type);
    s << indent << "range_min: ";
    Printer<double>::stream(s, indent + "  ", v.range_min);
    s << indent << "range_max: ";
    Printer<double>::stream(s, indent + "  ", v.range_max);
    s << indent << "precision: ";
    Printer<double>::stream(s, indent + "  ", v.precision);
    s << indent << "rated_speed: ";
    Printer<double>::stream(s, indent + "  ", v.rated_speed);
    s << indent << "reachable_speed: ";
    Printer<double>::stream(s, indent + "  ", v.reachable_speed);
    s << indent << "rated_torque: ";
    Printer<double>::stream(s, indent + "  ", v.rated_torque);
    s << indent << "reachable_torque: ";
    Printer<double>::stream(s, indent + "  ", v.reachable_torque);
    s << indent << "temperature_range_min: ";
    Printer<double>::stream(s, indent + "  ", v.temperature_range_min);
    s << indent << "temperature_range_max: ";
    Printer<double>::stream(s, indent + "  ", v.temperature_range_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSBOT_MSGS_MESSAGE_SPECSROTARYSERVORESPONSE_H
