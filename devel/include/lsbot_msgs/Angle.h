// Generated by gencpp from file lsbot_msgs/Angle.msg
// DO NOT EDIT!


#ifndef LSBOT_MSGS_MESSAGE_ANGLE_H
#define LSBOT_MSGS_MESSAGE_ANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lsbot_msgs
{
template <class ContainerAllocator>
struct Angle_
{
  typedef Angle_<ContainerAllocator> Type;

  Angle_()
    : header()
    , status(0)
    , angle(0.0)  {
    }
  Angle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _status_type;
  _status_type status;

   typedef double _angle_type;
  _angle_type angle;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSTABLE)
  #undef UNSTABLE
#endif
#if defined(_WIN32) && defined(STABLE)
  #undef STABLE
#endif
#if defined(_WIN32) && defined(UNDEFINED)
  #undef UNDEFINED
#endif
#if defined(_WIN32) && defined(RECALIBRATE)
  #undef RECALIBRATE
#endif
#if defined(_WIN32) && defined(MIN_VALUE)
  #undef MIN_VALUE
#endif
#if defined(_WIN32) && defined(MAX_VALUE)
  #undef MAX_VALUE
#endif

  enum {
    UNSTABLE = 0,
    STABLE = 1,
    UNDEFINED = 2,
    RECALIBRATE = -10,
  };

  static const double MIN_VALUE;
  static const double MAX_VALUE;

  typedef boost::shared_ptr< ::lsbot_msgs::Angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lsbot_msgs::Angle_<ContainerAllocator> const> ConstPtr;

}; // struct Angle_

typedef ::lsbot_msgs::Angle_<std::allocator<void> > Angle;

typedef boost::shared_ptr< ::lsbot_msgs::Angle > AnglePtr;
typedef boost::shared_ptr< ::lsbot_msgs::Angle const> AngleConstPtr;

// constants requiring out of line definition

   

   

   

   

   
   template<typename ContainerAllocator> const double
      Angle_<ContainerAllocator>::MIN_VALUE =
        
          0.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Angle_<ContainerAllocator>::MAX_VALUE =
        
          1.57079632679
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lsbot_msgs::Angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lsbot_msgs::Angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lsbot_msgs::Angle_<ContainerAllocator1> & lhs, const ::lsbot_msgs::Angle_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lsbot_msgs::Angle_<ContainerAllocator1> & lhs, const ::lsbot_msgs::Angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lsbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::Angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::Angle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::Angle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lsbot_msgs::Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01acd77b6666d0b00354cd350705edbb";
  }

  static const char* value(const ::lsbot_msgs::Angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01acd77b6666d0b0ULL;
  static const uint64_t static_value2 = 0x0354cd350705edbbULL;
};

template<class ContainerAllocator>
struct DataType< ::lsbot_msgs::Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lsbot_msgs/Angle";
  }

  static const char* value(const ::lsbot_msgs::Angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lsbot_msgs::Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reported angle by the Floorscan sensor\n"
"\n"
"# Possible Status States\n"
"int16 UNSTABLE = 0      # not yet initialized\n"
"int16 STABLE = 1        # Initialized and working\n"
"int16 UNDEFINED = 2     # Undefined\n"
"int16 RECALIBRATE = -10 # Special angle value to recalibrate\n"
"float64 MIN_VALUE = 0.     # Minimum Value\n"
"float64 MAX_VALUE = 1.57079632679489661923 # Maximum Value\n"
"\n"
"std_msgs/Header header\n"
"int16 status        # Current Status based on the Status States\n"
"float64 angle         # Angle in radians\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lsbot_msgs::Angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lsbot_msgs::Angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lsbot_msgs::Angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lsbot_msgs::Angle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSBOT_MSGS_MESSAGE_ANGLE_H
