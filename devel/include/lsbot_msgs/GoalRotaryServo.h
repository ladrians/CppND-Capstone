// Generated by gencpp from file lsbot_msgs/GoalRotaryServo.msg
// DO NOT EDIT!


#ifndef LSBOT_MSGS_MESSAGE_GOALROTARYSERVO_H
#define LSBOT_MSGS_MESSAGE_GOALROTARYSERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lsbot_msgs
{
template <class ContainerAllocator>
struct GoalRotaryServo_
{
  typedef GoalRotaryServo_<ContainerAllocator> Type;

  GoalRotaryServo_()
    : header()
    , control_type(0)
    , position(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , effort(0.0)  {
    }
  GoalRotaryServo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control_type(0)
    , position(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , effort(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _control_type_type;
  _control_type_type control_type;

   typedef double _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _effort_type;
  _effort_type effort;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONTROL_TYPE_NONE)
  #undef CONTROL_TYPE_NONE
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION)
  #undef CONTROL_TYPE_POSITION
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_EFFORT)
  #undef CONTROL_TYPE_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_VELOCITY)
  #undef CONTROL_TYPE_VELOCITY
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_VELOCITY)
  #undef CONTROL_TYPE_POSITION_VELOCITY
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_EFFORT)
  #undef CONTROL_TYPE_POSITION_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_VELOCITY_EFFORT)
  #undef CONTROL_TYPE_VELOCITY_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_VELOCITY_EFFORT)
  #undef CONTROL_TYPE_POSITION_VELOCITY_EFFORT
#endif

  enum {
    CONTROL_TYPE_NONE = 0u,
    CONTROL_TYPE_POSITION = 1u,
    CONTROL_TYPE_EFFORT = 2u,
    CONTROL_TYPE_VELOCITY = 3u,
    CONTROL_TYPE_POSITION_VELOCITY = 4u,
    CONTROL_TYPE_POSITION_EFFORT = 5u,
    CONTROL_TYPE_VELOCITY_EFFORT = 6u,
    CONTROL_TYPE_POSITION_VELOCITY_EFFORT = 7u,
  };


  typedef boost::shared_ptr< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> const> ConstPtr;

}; // struct GoalRotaryServo_

typedef ::lsbot_msgs::GoalRotaryServo_<std::allocator<void> > GoalRotaryServo;

typedef boost::shared_ptr< ::lsbot_msgs::GoalRotaryServo > GoalRotaryServoPtr;
typedef boost::shared_ptr< ::lsbot_msgs::GoalRotaryServo const> GoalRotaryServoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator1> & lhs, const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.control_type == rhs.control_type &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.effort == rhs.effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator1> & lhs, const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lsbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7c284381d46455f889dcdafb56f5389";
  }

  static const char* value(const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7c284381d46455fULL;
  static const uint64_t static_value2 = 0x889dcdafb56f5389ULL;
};

template<class ContainerAllocator>
struct DataType< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lsbot_msgs/GoalRotaryServo";
  }

  static const char* value(const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# control the position, velocity or/and effort\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8 CONTROL_TYPE_NONE=0\n"
"uint8 CONTROL_TYPE_POSITION=1\n"
"uint8 CONTROL_TYPE_EFFORT=2\n"
"uint8 CONTROL_TYPE_VELOCITY=3\n"
"uint8 CONTROL_TYPE_POSITION_VELOCITY=4\n"
"uint8 CONTROL_TYPE_POSITION_EFFORT=5\n"
"uint8 CONTROL_TYPE_VELOCITY_EFFORT=6\n"
"uint8 CONTROL_TYPE_POSITION_VELOCITY_EFFORT=7\n"
"uint8 control_type # rotary servomotor control type\n"
"\n"
"float64 position # goal position\n"
"\n"
"float32 velocity # movement velocity\n"
"\n"
"float32 acceleration # movement acceleration\n"
"\n"
"float32 effort # movement torque\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control_type);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalRotaryServo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lsbot_msgs::GoalRotaryServo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_type);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "effort: ";
    Printer<float>::stream(s, indent + "  ", v.effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSBOT_MSGS_MESSAGE_GOALROTARYSERVO_H
