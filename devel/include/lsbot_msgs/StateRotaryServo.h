// Generated by gencpp from file lsbot_msgs/StateRotaryServo.msg
// DO NOT EDIT!


#ifndef LSBOT_MSGS_MESSAGE_STATEROTARYSERVO_H
#define LSBOT_MSGS_MESSAGE_STATEROTARYSERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lsbot_msgs
{
template <class ContainerAllocator>
struct StateRotaryServo_
{
  typedef StateRotaryServo_<ContainerAllocator> Type;

  StateRotaryServo_()
    : header()
    , goal(0.0)
    , position(0.0)
    , error(0.0)
    , velocity(0.0)
    , effort(0.0)
    , load(0.0)
    , moving(false)
    , fault(0)
    , control_type(0)  {
    }
  StateRotaryServo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal(0.0)
    , position(0.0)
    , error(0.0)
    , velocity(0.0)
    , effort(0.0)
    , load(0.0)
    , moving(false)
    , fault(0)
    , control_type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _goal_type;
  _goal_type goal;

   typedef double _position_type;
  _position_type position;

   typedef double _error_type;
  _error_type error;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _effort_type;
  _effort_type effort;

   typedef double _load_type;
  _load_type load;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef uint8_t _fault_type;
  _fault_type fault;

   typedef uint8_t _control_type_type;
  _control_type_type control_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FAULT_NONE)
  #undef FAULT_NONE
#endif
#if defined(_WIN32) && defined(FAULT_CURRENT)
  #undef FAULT_CURRENT
#endif
#if defined(_WIN32) && defined(FAULT_GENERAL)
  #undef FAULT_GENERAL
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_NONE)
  #undef CONTROL_TYPE_NONE
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION)
  #undef CONTROL_TYPE_POSITION
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_EFFORT)
  #undef CONTROL_TYPE_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_VELOCITY)
  #undef CONTROL_TYPE_VELOCITY
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_VELOCITY)
  #undef CONTROL_TYPE_POSITION_VELOCITY
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_EFFORT)
  #undef CONTROL_TYPE_POSITION_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_VELOCITY_EFFORT)
  #undef CONTROL_TYPE_VELOCITY_EFFORT
#endif
#if defined(_WIN32) && defined(CONTROL_TYPE_POSITION_VELOCITY_EFFORT)
  #undef CONTROL_TYPE_POSITION_VELOCITY_EFFORT
#endif

  enum {
    FAULT_NONE = 0u,
    FAULT_CURRENT = 1u,
    FAULT_GENERAL = 2u,
    CONTROL_TYPE_NONE = 0u,
    CONTROL_TYPE_POSITION = 1u,
    CONTROL_TYPE_EFFORT = 2u,
    CONTROL_TYPE_VELOCITY = 3u,
    CONTROL_TYPE_POSITION_VELOCITY = 4u,
    CONTROL_TYPE_POSITION_EFFORT = 5u,
    CONTROL_TYPE_VELOCITY_EFFORT = 6u,
    CONTROL_TYPE_POSITION_VELOCITY_EFFORT = 7u,
  };


  typedef boost::shared_ptr< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> const> ConstPtr;

}; // struct StateRotaryServo_

typedef ::lsbot_msgs::StateRotaryServo_<std::allocator<void> > StateRotaryServo;

typedef boost::shared_ptr< ::lsbot_msgs::StateRotaryServo > StateRotaryServoPtr;
typedef boost::shared_ptr< ::lsbot_msgs::StateRotaryServo const> StateRotaryServoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator1> & lhs, const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal == rhs.goal &&
    lhs.position == rhs.position &&
    lhs.error == rhs.error &&
    lhs.velocity == rhs.velocity &&
    lhs.effort == rhs.effort &&
    lhs.load == rhs.load &&
    lhs.moving == rhs.moving &&
    lhs.fault == rhs.fault &&
    lhs.control_type == rhs.control_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator1> & lhs, const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lsbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7b87918793ebff92fa52e8d24df3ee5";
  }

  static const char* value(const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7b87918793ebff9ULL;
  static const uint64_t static_value2 = 0x2fa52e8d24df3ee5ULL;
};

template<class ContainerAllocator>
struct DataType< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lsbot_msgs/StateRotaryServo";
  }

  static const char* value(const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# motor condition and the reason in case of error\n"
"\n"
"std_msgs/Header header # motor state is at this time\n"
"\n"
"float64 goal # commanded position\n"
"\n"
"float64 position # current position encoder\n"
"\n"
"float64 error # difference between current and goal positions\n"
"\n"
"float64 velocity # current velocity\n"
"\n"
"float64 effort # current effort of the actuator\n"
"\n"
"float64 load # load imposed on the motor\n"
"\n"
"bool moving # whether the motor is currently in motion\n"
"\n"
"uint8 FAULT_NONE=0\n"
"uint8 FAULT_CURRENT=1\n"
"uint8 FAULT_GENERAL=2\n"
"uint8 fault # fault cause\n"
"\n"
"uint8 CONTROL_TYPE_NONE=0\n"
"uint8 CONTROL_TYPE_POSITION=1\n"
"uint8 CONTROL_TYPE_EFFORT=2\n"
"uint8 CONTROL_TYPE_VELOCITY=3\n"
"uint8 CONTROL_TYPE_POSITION_VELOCITY=4\n"
"uint8 CONTROL_TYPE_POSITION_EFFORT=5\n"
"uint8 CONTROL_TYPE_VELOCITY_EFFORT=6\n"
"uint8 CONTROL_TYPE_POSITION_VELOCITY_EFFORT=7\n"
"uint8 control_type # rotary servomotor control type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal);
      stream.next(m.position);
      stream.next(m.error);
      stream.next(m.velocity);
      stream.next(m.effort);
      stream.next(m.load);
      stream.next(m.moving);
      stream.next(m.fault);
      stream.next(m.control_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateRotaryServo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lsbot_msgs::StateRotaryServo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lsbot_msgs::StateRotaryServo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal: ";
    Printer<double>::stream(s, indent + "  ", v.goal);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
    s << indent << "load: ";
    Printer<double>::stream(s, indent + "  ", v.load);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fault);
    s << indent << "control_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSBOT_MSGS_MESSAGE_STATEROTARYSERVO_H
