# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lsbot_msgs/StateRotaryServo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class StateRotaryServo(genpy.Message):
  _md5sum = "a7b87918793ebff92fa52e8d24df3ee5"
  _type = "lsbot_msgs/StateRotaryServo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# motor condition and the reason in case of error

std_msgs/Header header # motor state is at this time

float64 goal # commanded position

float64 position # current position encoder

float64 error # difference between current and goal positions

float64 velocity # current velocity

float64 effort # current effort of the actuator

float64 load # load imposed on the motor

bool moving # whether the motor is currently in motion

uint8 FAULT_NONE=0
uint8 FAULT_CURRENT=1
uint8 FAULT_GENERAL=2
uint8 fault # fault cause

uint8 CONTROL_TYPE_NONE=0
uint8 CONTROL_TYPE_POSITION=1
uint8 CONTROL_TYPE_EFFORT=2
uint8 CONTROL_TYPE_VELOCITY=3
uint8 CONTROL_TYPE_POSITION_VELOCITY=4
uint8 CONTROL_TYPE_POSITION_EFFORT=5
uint8 CONTROL_TYPE_VELOCITY_EFFORT=6
uint8 CONTROL_TYPE_POSITION_VELOCITY_EFFORT=7
uint8 control_type # rotary servomotor control type

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  FAULT_NONE = 0
  FAULT_CURRENT = 1
  FAULT_GENERAL = 2
  CONTROL_TYPE_NONE = 0
  CONTROL_TYPE_POSITION = 1
  CONTROL_TYPE_EFFORT = 2
  CONTROL_TYPE_VELOCITY = 3
  CONTROL_TYPE_POSITION_VELOCITY = 4
  CONTROL_TYPE_POSITION_EFFORT = 5
  CONTROL_TYPE_VELOCITY_EFFORT = 6
  CONTROL_TYPE_POSITION_VELOCITY_EFFORT = 7

  __slots__ = ['header','goal','position','error','velocity','effort','load','moving','fault','control_type']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','bool','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal,position,error,velocity,effort,load,moving,fault,control_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateRotaryServo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = 0.
      if self.position is None:
        self.position = 0.
      if self.error is None:
        self.error = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.effort is None:
        self.effort = 0.
      if self.load is None:
        self.load = 0.
      if self.moving is None:
        self.moving = False
      if self.fault is None:
        self.fault = 0
      if self.control_type is None:
        self.control_type = 0
    else:
      self.header = std_msgs.msg.Header()
      self.goal = 0.
      self.position = 0.
      self.error = 0.
      self.velocity = 0.
      self.effort = 0.
      self.load = 0.
      self.moving = False
      self.fault = 0
      self.control_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.goal, _x.position, _x.error, _x.velocity, _x.effort, _x.load, _x.moving, _x.fault, _x.control_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.goal, _x.position, _x.error, _x.velocity, _x.effort, _x.load, _x.moving, _x.fault, _x.control_type,) = _get_struct_6d3B().unpack(str[start:end])
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d3B().pack(_x.goal, _x.position, _x.error, _x.velocity, _x.effort, _x.load, _x.moving, _x.fault, _x.control_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.goal, _x.position, _x.error, _x.velocity, _x.effort, _x.load, _x.moving, _x.fault, _x.control_type,) = _get_struct_6d3B().unpack(str[start:end])
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d3B = None
def _get_struct_6d3B():
    global _struct_6d3B
    if _struct_6d3B is None:
        _struct_6d3B = struct.Struct("<6d3B")
    return _struct_6d3B
