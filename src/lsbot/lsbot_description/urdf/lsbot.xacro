<?xml version="1.0"?>

<!-- Using initial specification from https://github.com/SyrianSpock/rover
Ideas taken from
http://www.generationrobots.com/blog/en/2015/02/robotic-simulation-scenarios-with-gazebo-and-ros/
-->

<robot name="lsbot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:property name="prefix" value=""/>
  <!-- Degree-to-radian conversions -->
  <xacro:property name="degrees_45" value="0.785398163"/>
  <xacro:property name="degrees_90" value="1.57079633"/>
  <xacro:property name="degrees_180" value="3.1415926535897931" />

  <!-- body properties
         body_length is measured along the x axis, 
         body_width along the y axis, and body_height along the z axis. -->
  <xacro:property name="body_length"    value="0.2286"/>
  <xacro:property name="body_width"     value="0.1524"/>
  <xacro:property name="body_height"    value="0.01"/>
  <xacro:property name="body_mass"      value="0.5"/>
  <xacro:property name="body_clearance" value="0.125"/>

  <!-- Tower properties -->
  <xacro:property name="tower_name"     value="tower" />
  <xacro:property name="tower_length"   value="0.35" />
  <xacro:property name="tower_radius"   value="0.01" />
  <xacro:property name="tower_x"        value="${body_length/2 + 0.05}" />
  <xacro:property name="tower_xyz"      value="${tower_x} 0 ${tower_length/2}" />
  <xacro:property name="tower_mass"     value="0.05" />

  <!-- Wheel properties
       hub_dia and tire_dia are the diameters of the hub and tire,
       respectively. hex_hub_depth is the distance that the hex hub is
       inset from the outer edge of the tire. It is set so that each wheel
       is a "zero offset" wheel. hex_hub_depth = tire_width / 2 - axle_length. -->
  <xacro:property name="hub_dia"       value="0.100"/>
  <xacro:property name="tire_dia"      value="0.0625"/>
  <xacro:property name="tire_width"    value="0.024765"/>
  <xacro:property name="wheel_mass"    value="0.038980594"/>

  <!-- Wheel position properties -->
  <xacro:property name="wheelbase_xoffset" value="0.025"/>
  <xacro:property name="wheelbase_yoffset" value="0.022"/>
  <xacro:property name="wheel_bogie_d"    value="${3*tire_dia/2}"/>


  <xacro:property name="wheelbase_x"     value="${body_length/2 + wheelbase_xoffset - tire_dia/2}"/>
  <xacro:property name="wheelbase_track" value="${body_width/2 + wheelbase_yoffset + tire_width/2}"/>

  <!-- Sensor position properties -->
  <xacro:property name="scanner_length"  value="0.07570"/>
  <xacro:property name="scanner_mass"    value="0.05"/>
  <xacro:property name="sensor_colour"   value="0.8 0 0 1"/>

  <xacro:property name="scanner_width"   value="0.07570"/>
  <xacro:property name="scanner_height"  value="0.05"/>
  <xacro:property name="scanner_angle"   value="${degrees_180}"/>
  <xacro:property name="scanner_samples" value="180"/>
  <xacro:property name="scanner_topic"   value="/scan"/>
  <xacro:property name="scanner_position" value="${tower_x} 0 ${body_height/2 - scanner_height/2}" />
  <xacro:property name="scanner_orientation" value="0 0 0"/>

  <xacro:property name="floorscanner_position" value="${tower_x + 0.05} 0 ${tower_length}" />
  <xacro:property name="floorscanner_position_rotate" value="0 0 0" />
  <xacro:property name="floorscanner_topic"   value="/floorscan"/>
  <xacro:property name="floorscanner_orientation" value="0 0.68 0"/>
  <xacro:property name="floorscanner_orientation_rotate" value="0 0 0"/>
  <xacro:property name="floorscanner_angle"   value="${degrees_90}"/>

  <xacro:property name="axle_eff_limit" value="5.12766"/>
  <xacro:property name="axle_vel_limit" value="244.8696"/>

  <material name="body_mat">
    <color rgba="0.5 0.5 0.5 1"/>
  </material>
  <material name="tire_mat">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="imu_mat">
    <color rgba="0 0 0 1"/>
  </material>

  <!-- Null inertial element. This is needed to make the model work with Gazebo. -->
  <xacro:macro name="null_inertial">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
    </inertial>
  </xacro:macro>

  <!-- Inertia of a solid cuboid. Width is measured along the x axis, depth along the y axis, and height along the z axis. -->
  <xacro:macro name="solid_cuboid_inertial"
               params="width depth height mass *origin">
    <inertial>
      <xacro:insert_block name="origin"/>
      <mass value="${mass}"/>
      <inertia ixx="${mass * (depth * depth + height * height) / 12}"
               ixy="0" ixz="0"
               iyy="${mass * (width * width + height * height) / 12}"
               iyz="0"
               izz="${mass * (width * width + depth * depth) / 12}"/>
    </inertial>
  </xacro:macro>

  <!-- Inertia of a thick-walled cylindrical tube with open ends. Height is
       measured along the z axis, which is the tube's axis. inner_rad and
       outer_rad are the tube's inner and outer radii, respectively. -->
  <xacro:macro name="thick_walled_tube_inertial"
               params="inner_rad outer_rad height mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               ixy="0" ixz="0"
               iyy="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               iyz="0"
               izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"/>
    </inertial>
  </xacro:macro>

  <!-- The "wheel" macro defines an axle carrier, axle, and wheel. -->
  <xacro:macro name="wheel" params="lr_prefix fr_prefix lr_pos fr_pos">
    <joint name="${lr_prefix}_${fr_prefix}_axle" type="continuous">
      <parent link="body"/>
      <child link="${lr_prefix}_${fr_prefix}_wheel"/>
      <origin xyz="${fr_pos}
                   ${lr_pos}
                   ${- body_clearance + tire_dia/2}"
              rpy="${degrees_90} 0 0"/>
      <axis xyz="0 0 -1" use_parent_model_frame="0"/>
      <!--limit effort="${axle_eff_limit}" velocity="${axle_vel_limit}"/>
      <joint_properties damping="0.0" friction="0.0"/-->
    </joint>
    <transmission name="${lr_prefix}_${fr_prefix}_axle_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${lr_prefix}_${fr_prefix}_axle2">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${lr_prefix}_${fr_prefix}_axle_act">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>10</mechanicalReduction>
      </actuator>
    </transmission>
    <link name="${lr_prefix}_${fr_prefix}_wheel">
      <xacro:visual_collision rpy="0 0 0" material="tire_mat">
         <cylinder radius="${tire_dia / 2}" length="${tire_width}"/>
      </xacro:visual_collision>
      <xacro:thick_walled_tube_inertial
          inner_rad="${hub_dia / 2}" outer_rad="${tire_dia / 2}"
          height="${tire_width}" mass="${wheel_mass}"/>
    </link>
    <gazebo reference="${lr_prefix}_${fr_prefix}_wheel">
      <material>Gazebo/Black</material>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="visual_collision" params="rpy material *form" >
   <visual>
      <geometry>
        <xacro:insert_block name="form"/>
      </geometry>
      <origin xyz="0 0 0" rpy="${rpy}" />
      <material name="${material}" />
    </visual>
    <collision>
      <geometry>
        <xacro:insert_block name="form"/>
      </geometry>
      <origin xyz="0 0 0" rpy="${rpy}" />
    </collision>
  </xacro:macro>


  <!-- robot_footprint -->
  <link name="robot_footprint"></link>

  <joint name="robot_footprint_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="robot_footprint"/>
    <child link="base_link" />
  </joint>

  <!-- base_link must have geometry so that its axes can be displayed in rviz. -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="body_mat"/>
    </visual>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Green</material>
  </gazebo>

  <joint name="imu_joint" type="fixed">
     <parent link="base_link"/>
     <child  link="imu_link"/>
     <axis   xyz="1 0 0"/>
     <origin xyz="-0.15 0 0" rpy="0 0 -${degrees_180}"/>
  </joint>

  <link name="imu_link">
    <xacro:null_inertial />  
    <xacro:visual_collision rpy="0 0 0" material="imu_mat">
      <box size="0.001 0.001 0.001"/>
    </xacro:visual_collision>
  </link>
  
  <!-- body -->
  <link name="body">
    <xacro:visual_collision rpy="0 0 ${-body_height / 2}" material="body_mat">
      <box size="${body_length} ${body_width} ${body_height}"/>
    </xacro:visual_collision>
    <xacro:solid_cuboid_inertial
        width="${body_length}" depth="${body_width}"
        height="${body_height}" mass="${body_mass}">
      <origin xyz="0 0 ${-body_height / 2}"/>
    </xacro:solid_cuboid_inertial>
  </link>
  <gazebo reference="body">
    <material>Gazebo/Grey</material>
  </gazebo>

  <joint name="base_link_to_chasis" type="fixed">
    <parent link="base_link"/>
    <child  link="body"/>
  </joint>

  <xacro:include filename="$(find lsbot_description)/urdf/lsbot.transmission.xacro" />
  <link name="${prefix}motor1_link">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.5"/>
      <inertia ixx="0.0200769278" ixy="-7.72273E-006" ixz="-0.0050158708" iyy="0.0257088151" iyz="5.49229E-006" izz="0.0120821377"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="Gazebo/Green">
        <color rgba="0. 0. 0. 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="${prefix}motor1_link">
    <material>Gazebo/White</material>
    <selfCollide>True</selfCollide>
  </gazebo>
  <link name="${prefix}motor1_cover">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0"/>
      <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="Gazebo/Black">
        <color rgba="0. 0. 0. 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="${prefix}motor1_cover">
    <material>Gazebo/Orange</material>
    <selfCollide>True</selfCollide>
  </gazebo>
  <joint name="${prefix}motor1" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="${prefix}${tower_name}"/>
    <child link="${prefix}motor1_link"/>
    <axis xyz="0 1 0"/>
    <limit effort="104.0" lower="-3.1416" upper="3.1416" velocity="1.57"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="${prefix}motor1_cover_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.0"/>
    <parent link="${prefix}motor1_link"/>
    <child link="${prefix}motor1_cover"/>
  </joint>  

  <!-- Tower -->
  <link name="${tower_name}">
    <xacro:visual_collision rpy="0 0 0" material="body_mat">
      <cylinder length="${tower_length}" radius="${tower_radius}"/>
    </xacro:visual_collision>
    <xacro:solid_cuboid_inertial
        width="${tower_radius*2}" depth="${tower_radius*2}" height="${tower_length}" mass="${tower_mass}">
      <origin xyz="${tower_xyz}"/>
    </xacro:solid_cuboid_inertial>
  </link>
  <joint name="${tower_name}_joint" type="fixed">
    <parent link="body"/>
    <child  link="${tower_name}" />
    <origin xyz="${tower_xyz}" rpy="0 0 0" />
   </joint>
  <gazebo reference="${tower_name}">
    <material>Gazebo/Black</material>
  </gazebo>

  <!-- Wheels -->
  <xacro:wheel lr_prefix="left_bogie" fr_prefix="front"
               lr_pos="${wheelbase_track}"
               fr_pos="${wheelbase_x}"
               />
  <xacro:wheel lr_prefix="left_bogie" fr_prefix="rear"
               lr_pos="${wheelbase_track}"
               fr_pos="${wheelbase_x - wheel_bogie_d}"
               />
  <xacro:wheel lr_prefix="left_rocker" fr_prefix="rear"
               lr_pos="${wheelbase_track}"
               fr_pos="${- wheelbase_x}"
               />
  <xacro:wheel lr_prefix="right_bogie" fr_prefix="front"
               lr_pos="${- wheelbase_track}"
               fr_pos="${wheelbase_x}"
               />
  <xacro:wheel lr_prefix="right_bogie" fr_prefix="rear"
               lr_pos="${- wheelbase_track}"
               fr_pos="${wheelbase_x - wheel_bogie_d}"
               />
  <xacro:wheel lr_prefix="right_rocker" fr_prefix="rear"
               lr_pos="${- wheelbase_track}"
               fr_pos="${- wheelbase_x}"
               />
 
  <gazebo>
    <!--plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin-->
    <plugin name="${prefix}joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
        <argument>--ros-args --remap ~/out:=${prefix}joint_states</argument>
      </ros>
      <updateRate>10</updateRate>
      <jointName>${prefix}motor1</jointName>
    </plugin>

    <plugin name="lsbot_actuator_rotaryservo" filename="liblsbot_gazebo_joint_plugin.so">
      <ros></ros>
      <axis1>${prefix}motor1</axis1>
    </plugin>

    <!-- Differential Drive -->
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <rosDebugLevel>na</rosDebugLevel>
      <legacyMode>false</legacyMode>
      <publishWheelTF>true</publishWheelTF>
      <robotNamespace>/</robotNamespace>
      <publishTf>1</publishTf>
      <publishOdomTF>0</publishOdomTF>
      <publishWheelJointState>true</publishWheelJointState>
      <alwaysOn>true</alwaysOn>
      <updateRate>5</updateRate>
      <leftJoint>left_bogie_rear_axle</leftJoint>
      <rightJoint>right_bogie_rear_axle</rightJoint>
      <wheelSeparation>0.4</wheelSeparation>
      <wheelDiameter>0.2</wheelDiameter>
      <broadcastTF>1</broadcastTF>
      <wheelTorque>2800</wheelTorque>
      <wheelAcceleration>1.0</wheelAcceleration>
      <commandTopic>cmd_vel</commandTopic>
      <odometryFrame>odom</odometryFrame>
      <odometryTopic>odom_shaft</odometryTopic>
      <robotBaseFrame>robot_footprint</robotBaseFrame>
      <odometrySource>world</odometrySource>
      <!--odometrysource>1</odometry_source-->
    </plugin>
  </gazebo>

  <!-- LIDAR sensor -->
  <xacro:include filename="$(find lsbot_description)/urdf/lidar.urdf.xacro" />
  <!--xacro:lidar name="laser" parent="body">
    <origin xyz="${scanner_position}" rpy="0 0 0"/>
  </xacro:lidar-->

  <xacro:lidar name="scanner" parent="body" width="${scanner_width}" height="${scanner_height}" position="${scanner_position}" samples="${scanner_samples}" angle="${scanner_angle}" topic="${scanner_topic}" orientation="${scanner_orientation}" frame="scanner"/>
  <xacro:lidar name="floorscan" parent="motor1_cover" width="${scanner_width}" height="${scanner_height}" position="${floorscanner_position_rotate}" samples="${scanner_samples}" angle="${floorscanner_angle}" topic="${floorscanner_topic}" orientation="${floorscanner_orientation_rotate}" frame="floorscan_dynamic"/>

</robot>
